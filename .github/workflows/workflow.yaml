name: Obot CI/CD

on:
  push:
  workflow_dispatch:    

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-east1
  WORKLOAD_IDENTITY_PROVIDER: "projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-action/providers/obot-github-action"
  SERVICE_ACCOUNT: "obot-github-action@${{ secrets.GCP_PROJECT_ID  }}.iam.gserviceaccount.com"

  ENV: ${{ (github.ref_name == 'master' && 'prod') || 'dev' }}
  SCRAPER_VERSION: "v0.0.1"
  CHATBOT_VERSION: "v0.0.1"

  GKE_CLUSTER: "primary"
  GKE_ZONE: "us-east1-b"

  TF_DRY_RUN: ${{ (github.ref_name == 'master' && 'false') || 'true' }}
  GKE_DRY_RUN: ${{ (github.ref_name == 'master' && 'false') || 'true' }}

jobs:
  check-diff:
    name: Check for changes in each folder
    runs-on: ubuntu-latest

    outputs:
      scraper_changed: ${{ steps.changes.outputs.scraper }}
      chatbot_changed: ${{ steps.changes.outputs.chatbot }}
      terraform_changed: ${{ steps.changes.outputs.terraform }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for changes
        id: changes
        uses: dorny/paths-filter@v3
        with:
          base: ${{ github.ref_name }}
          predicate-quantifier: 'every'
          filters: |
            scraper:
              - 'scraper/**'
              - '!scraper/README.md'
            chatbot:
              - 'chatbot/**'
              - '!chatbot/helm/**'
              - '!chatbot/README.md'
            terraform:
              - 'terraform/**'
              - '!terraform/README.md'

  build-and-publish-scraper:
    needs: check-diff
    if: ${{ needs.check-diff.outputs.scraper_changed == 'true' }}
    name: Build and Publish Scraper Docker Images to Artifact Registry
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          token_format: 'access_token'
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.SERVICE_ACCOUNT }}
      
      - name: Docker login to Google Artifact Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGION }}-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Build and Publish Scraper Docker Image
        env:
          IMAGE: "${{ env.REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/obot-${{ env.ENV }}/scraper"
          VERSION_TAG: "${{ env.SCRAPER_VERSION }}-${{ github.sha }}"
        run: |
          echo "Building Scraper Docker Image"
          docker build \
            --build-arg GCP_PROJECT_ID=${GCP_PROJECT_ID} \
            -t "${IMAGE}:${VERSION_TAG}" \
            -t "${IMAGE}:in-use" \
            ./scraper
        
          echo "Pushing Scraper Docker Image to Artifact Registry"
          docker push "${IMAGE}:${VERSION_TAG}"
          docker push "${IMAGE}:in-use"

  build-and-publish-chatbot:
    needs: check-diff
    if: ${{ needs.check-diff.outputs.chatbot_changed == 'true' }}
    name: Build and Publish Chatbot Docker Images to Artifact Registry
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          token_format: 'access_token'
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.SERVICE_ACCOUNT }}
      
      - name: Docker login to Google Artifact Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGION }}-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Get secrets from Secret Manager
        id: get-secrets
        uses: google-github-actions/get-secretmanager-secrets@v2
        with:
          secrets: |-
            GOOGLE_API_KEY:${{ secrets.GCP_PROJECT_ID }}/GOOGLE_API_KEY
            LANGCHAIN_API_KEY:${{ secrets.GCP_PROJECT_ID }}/LANGCHAIN_API_KEY

      - name: Build and Publish Chatbot Docker Image
        env:
          IMAGE: "${{ env.REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/obot-${{ env.ENV }}/chatbot"
          VERSION_TAG: "${{ env.CHATBOT_VERSION }}-${{ github.sha }}"
        run: |
          echo "Building Chatbot Docker Image"
          docker build \
            --build-arg GCP_PROJECT_ID=${GCP_PROJECT_ID} \
            --build-arg GOOGLE_API_KEY=${{ steps.get-secrets.outputs.GOOGLE_API_KEY }} \
            --build-arg LANGCHAIN_API_KEY=${{ steps.get-secrets.outputs.LANGCHAIN_API_KEY }} \
            -t "${IMAGE}:${VERSION_TAG}" \
            -t "${IMAGE}:in-use" \
            ./chatbot
        
          echo "Pushing Chatbot Docker Image to Artifact Registry"
          docker push "${IMAGE}:${VERSION_TAG}"
          docker push "${IMAGE}:in-use"

  apply-terraform:
    needs: [check-diff, build-and-publish-scraper, build-and-publish-chatbot]
    if: always() && !cancelled() && !failure()
    name: Apply Terraform Changes
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.SERVICE_ACCOUNT }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      
      - name: Terraform Init and Set Variables
        run: |
          cd terraform
          terraform init
          echo "TF_VAR_GCP_PROJECT_ID=$GCP_PROJECT_ID" >> $GITHUB_ENV
          echo "TF_VAR_REGION=$REGION" >> $GITHUB_ENV
          echo "TF_VAR_ENV=$ENV" >> $GITHUB_ENV

      - name: Terraform Plan
        if: env.TF_DRY_RUN == 'true'
        run: |
          cd terraform
          terraform plan

      - name: Terraform Apply
        if: env.TF_DRY_RUN == 'false'
        run: |
          cd terraform
          terraform apply -auto-approve

  deploy-chatbot-gke:
    needs: [check-diff, build-and-publish-chatbot, apply-terraform]
    if: always() && !cancelled() && !failure()
    name: Deploy Chatbot to GKE
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.SERVICE_ACCOUNT }}
  
      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
      
      - name: Get digest image in-use from Artifact Registry
        id: get-digest
        run: |
          echo $(curl -H "Authorization: Bearer $(gcloud auth print-access-token)" \
          "https://artifactregistry.us-east1.rep.googleapis.com/v1/projects/$GCP_PROJECT_ID/locations/us-east1/repositories/obot-$ENV/dockerImages")
          IMAGE_WITH_DIGEST=$(curl -H "Authorization: Bearer $(gcloud auth print-access-token)" \
          "https://artifactregistry.us-east1.rep.googleapis.com/v1/projects/$GCP_PROJECT_ID/locations/us-east1/repositories/obot-$ENV/dockerImages" | \
          jq -r '.dockerImages[] | select(.tags[] | contains("in-use")) | select(.uri | contains("chatbot")) | .uri')
          echo "Image with digest: $IMAGE_WITH_DIGEST"
          echo "IMAGE_WITH_DIGEST=$IMAGE_WITH_DIGEST" >> $GITHUB_ENV
        
      - name: Set up Helm
        uses: azure/setup-helm@v4.2.0

      - name: Echo YAML
        run: |
          cd chatbot
          helm lint helm --values helm/values/values-$ENV.yaml --set image=$IMAGE_WITH_DIGEST,gcp_project_id=$GCP_PROJECT_ID
          helm template helm --values helm/values/values-$ENV.yaml --set image=$IMAGE_WITH_DIGEST,gcp_project_id=$GCP_PROJECT_ID
      
      - name: Deploy to GKE
        if: env.GKE_DRY_RUN == 'false'
        run: |
          cd chatbot
          helm upgrade --install chatbot-$ENV helm --values helm/values/values-$ENV.yaml --set image=$IMAGE_WITH_DIGEST,gcp_project_id=$GCP_PROJECT_ID


  # test-changes:
  #   needs: check-diff
  #   name: Test changes
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
      
  #     - name: Debug ref name
  #       run: echo ${{ github.ref_name}}

  #     - name: Debug logic
  #       run: |
  #         echo ${{ (github.ref_name == 'master' && 'prod') || 'dev' }}
  #         echo ${{ (github.ref_name == 'master' && 'prod') }}
  #         echo ${{ (true && 'prod') }}
  #         echo ${{ 'prod' || 'dev' }}

  #     - name: Debug environment variables
  #       run: |
  #         echo "GCP_PROJECT_ID: ${{ env.GCP_PROJECT_ID }}"
  #         echo "WORKLOAD_IDENTITY_PROVIDER: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}"
  #         echo "SERVICE_ACCOUNT: ${{ env.SERVICE_ACCOUNT }}"
  #         echo "ENV: ${{ env.ENV }}"
  #         echo "DRY_RUN: ${{ env.DRY_RUN }}"

  #     - name: Test Scraper
  #       if: ${{ needs.check-diff.outputs.scraper_changed == 'true' }}
  #       run: |
  #         echo "Scraper has changed"
  #     - name: Test Chatbot
  #       if: ${{ needs.check-diff.outputs.chatbot_changed == 'true' }}
  #       run: |
  #         echo "Chatbot has changed"
  #     - name: Test Terraform
  #       if: ${{ needs.check-diff.outputs.terraform_changed == 'true' }}
  #       run: |
  #         echo "Terraform has changed"
    